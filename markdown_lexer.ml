# 1 "markdown_lexer.mll"
 
open Lexing
open Markdown_parser

exception SyntaxError of string

let next_line lexbuf =
  let pos = lexbuf.lex_curr_p in
  lexbuf.lex_curr_p <-
    { pos with pos_bol = lexbuf.lex_curr_pos;
               pos_lnum = pos.pos_lnum + 1
    }

# 16 "markdown_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\252\255\253\255\001\000\002\000\004\000\006\000\008\000\
    \255\255\010\000\245\255\001\000\000\000\003\000\005\000\248\255\
    \249\255\250\255\251\255\252\255\253\255\254\255\255\255";
  Lexing.lex_backtrk = 
   "\001\000\255\255\255\255\002\000\001\000\001\000\001\000\001\000\
    \255\255\255\255\255\255\008\000\009\000\008\000\009\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\004\000\000\000\000\000\255\255\004\000\004\000\004\000\004\000\
    \000\000\013\000\000\000\011\000\255\255\011\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\002\000\002\000\255\255\003\000\255\255\255\255\
    \255\255\255\255\008\000\255\255\011\000\255\255\000\000\011\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\022\000\255\255\000\000\022\000\000\000\022\000\
    \000\000\000\000\000\000\000\000\012\000\005\000\000\000\000\000\
    \000\000\006\000\000\000\007\000\021\000\007\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\255\255\
    \000\000\020\000\000\000\000\000\000\000\000\000\014\000\019\000\
    \000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\017\000\000\000\000\000\000\000\016\000\
    \000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\255\255\255\255\255\255\255\255\000\000\255\255\000\000\
    \255\255\000\000\010\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\003\000\004\000\000\000\005\000\004\000\
    \006\000\005\000\007\000\006\000\009\000\007\000\255\255\009\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\012\000\011\000\255\255\013\000\255\255\014\000\
    \255\255\255\255\255\255\255\255\009\000\000\000\255\255\255\255\
    \255\255\005\000\255\255\006\000\014\000\007\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\011\000\255\255\013\000\
    \255\255\014\000\255\255\255\255\255\255\255\255\009\000\014\000\
    \255\255\255\255\255\255\014\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\014\000\255\255\255\255\255\255\014\000\
    \255\255\014\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\011\000\004\000\013\000\005\000\255\255\006\000\255\255\
    \007\000\255\255\009\000";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec read lexbuf =
    __ocaml_lex_read_rec lexbuf 0
and __ocaml_lex_read_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 20 "markdown_lexer.mll"
                      str
# 122 "markdown_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 20 "markdown_lexer.mll"
                          ( H1(str) )
# 126 "markdown_lexer.ml"

  | 1 ->
let
# 21 "markdown_lexer.mll"
                       str
# 132 "markdown_lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 21 "markdown_lexer.mll"
                               ( STRING(str) )
# 136 "markdown_lexer.ml"

  | 2 ->
# 22 "markdown_lexer.mll"
                 ( NEW_LINE )
# 141 "markdown_lexer.ml"

  | 3 ->
# 23 "markdown_lexer.mll"
             ( EOF )
# 146 "markdown_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_read_rec lexbuf __ocaml_lex_state

and read_string buf lexbuf =
    __ocaml_lex_read_string_rec buf lexbuf 9
and __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 28 "markdown_lexer.mll"
                           ( STRING (Buffer.contents buf) )
# 158 "markdown_lexer.ml"

  | 1 ->
# 29 "markdown_lexer.mll"
              ( Buffer.add_char buf '/'; read_string buf lexbuf )
# 163 "markdown_lexer.ml"

  | 2 ->
# 30 "markdown_lexer.mll"
              ( Buffer.add_char buf '\\'; read_string buf lexbuf )
# 168 "markdown_lexer.ml"

  | 3 ->
# 31 "markdown_lexer.mll"
              ( Buffer.add_char buf '\b'; read_string buf lexbuf )
# 173 "markdown_lexer.ml"

  | 4 ->
# 32 "markdown_lexer.mll"
              ( Buffer.add_char buf '\012'; read_string buf lexbuf )
# 178 "markdown_lexer.ml"

  | 5 ->
# 33 "markdown_lexer.mll"
              ( Buffer.add_char buf '\n'; read_string buf lexbuf )
# 183 "markdown_lexer.ml"

  | 6 ->
# 34 "markdown_lexer.mll"
              ( Buffer.add_char buf '\r'; read_string buf lexbuf )
# 188 "markdown_lexer.ml"

  | 7 ->
# 35 "markdown_lexer.mll"
              ( Buffer.add_char buf '\t'; read_string buf lexbuf )
# 193 "markdown_lexer.ml"

  | 8 ->
# 37 "markdown_lexer.mll"
    ( Buffer.add_string buf (Lexing.lexeme lexbuf);
      read_string buf lexbuf
    )
# 200 "markdown_lexer.ml"

  | 9 ->
# 40 "markdown_lexer.mll"
      ( raise (SyntaxError ("Illegal string character: " ^ Lexing.lexeme lexbuf)) )
# 205 "markdown_lexer.ml"

  | 10 ->
# 41 "markdown_lexer.mll"
        ( raise (SyntaxError ("String is not terminated")) )
# 210 "markdown_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state

;;

